Link: https://www.youtube.com/watch?v=l-5qrSZMUh4&list=PLhW3qG5bs-L8T6v6DgsZo93DgYDmOF9u4&index=8

*Lesson 8------------------------------------------------*
def name = "Chi Bao" -> Good
String name = "Chi Bao" -> Good
name = "Chi Bao -> Bad

println 'Name is ${name}' -> sai, phải sử dụng dấu ""
println "Name is ${name}" -> đúng, ${}: biến nội suy(variable interpolation)

// groovy in dynamically typed
def (String a, int b,  double c) = [30, 40, 50] //phép gán đa biến (multiple assginment)


*Lesson 9--------------------------------------------------*
// Data Types
def s = 10
println(s) -> 10
println(s.getClass().getName()) -> java.lang.Integer

def m = (byte)10
println(m) -> 10
println(m.getClass().getName()) -> java.lang.Byte

//byte 
byte b
println(b)
println(Byte.MIN_VALUE) //-128
println(Byte.MAX_VALUE) //127

//short
short c
println(c)
println(Short.MIN_VALUE) //-32768
println(Short.MAX_VALUE) //-32767

//int 
//long
//float
//double
//char
char c = 'a' -> true
char c = 'abc' -> false

//Boolean
boolean flag = true

//String
String str = "Groovy"


*Lesson 10--------------------------------------------------*
// Operators (toán tử)
// 1. Arithmetic operators (toán tử số học): 
+
-
*
/ (lấy hết, lấy luôn phần thập phân, vì trả về số thực)
% (lấy phần dư)
intdiv (lấy phần nguyên, bỏ qua phần thập phân, vì trả về số nguyên)
** (power: mũ)

// 2. Unary (đơn nhất) operators (toán tử một ngôi)
assert +3 == 3 -> true
assert -4 == -4 -> true
assert -4 == 0-4 -> true
assert -(-1) == 1 -> true


//3. Increment (tăng) ++ and Decrement -- (giảm)
int i = 10 
println(i++) // 10
println(i) // 11

int x = 10
println(++i) //11
println(i) //1

//4.

==
!=
<
<=
>
>=

// 5.
&&
||
!
****Precedence (sự ưu tiên): "!" > "&&" > "||" (giống Java)

//6. Tenary Operator
def output1 = (1>0)? "1 is greater" : "1 is not greater"
println(output1) //1 is greater


*Lesson 11--------------------------------------------------*
// Conditional Statements: If-else; switch-case
switch (variable) {
    case value1:
        // Thực hiện khi variable bằng value1
        break
    case value2:
        // Thực hiện khi variable bằng value2
        break
    case value3:
        // Thực hiện khi variable bằng value3
        break
    default:
        // Thực hiện khi không khớp với bất kỳ giá trị nào
}

*Lesson 12--------------------------------------------------*
// Loops (for, for in, while)
// upto, times, step

//For: for(int i = 0; i < n; i++) or for(def i = 0; i < n; i++) ~Java

// For in: for(i in 1..5) -> đi từ 1 đến 5
a..b -> từ a đến b
a..<b -> từ a đến b-1
b..>a -> đi từ b đến a+1 (đk: b>a)
(a..b).step(2) -> từ a đến b với bước nhảy 2

//upto
1.upto(5){
 println("$it") -> 1 2 3 4 5 -> $it là một biến đặt biệt đại diện cho đối tượng hiện tại đang xử lý
}

//times
5.times {println "$it"} -> 0, 1, 2, 3, 4 (Lặp 5 lần, bắt đầu từ 0)


1.step(10, 2) {println "$it"} -> 1, 3, 5 7, 9 (Bắt đầu từ 1, bước nhảy 2, đến ko vượt quá 10 (<=10))

*Lesson 13--------------------------------------------------*
// Exception Handling
try-catch
try-catch-finally
try-finally
finally: luôn được thực thi sau khối lệnh try hoặc catch bất kể có ngoại lệ xảy ra hay không

try{
	int i = 1/0
}catch(ArithmeticException exp1){
	println("Catch block to catch Arithmetic exp")
}catch(Exception exp){
	println("I am inside exception block")
	println(exp.getCause())
	println(exp.getMessage())
//	exp.printStackTrace()
}finally{
	pritnln("I am inside finally block")
}

*Lesson 14--------------------------------------------------*
// Strings                           Multiline		Interpolation (Phép nội suy)
single quoted '...'
double quoted "..."						Y
triple single quoted '''...'''		Y
triple double quoted ""...""		Y			Y
slashy /.../				Y			Y
dollar slashy $/.../$			Y			Y
----
def name = "Nguyen Chi Bao"
println(name) -> Nguyen Chi Bao
println("My name is " + name)
println("My name is ".concat(name)) -> concat: hàm nối chuỗi

println("My name is ${name}") -> My name is Nguyen Chi Bao
println('My name is ${name}') -> My name is ${name}
------

def name = "Nguyen Chi Bao"
println(name.length())
println(name[2]) -> u
println(name[-2]) -> a (đi ngược, bắt đầu từ -1 chứ ko bắt đầu từ 0, vì 0 ở đầu)
println(indexOf('u')) -> 2
println(name.[0..2]) -> Ngu
println(name[5..3]) -> ney
println(name[0,2,4]) -> Nue
println(name.substring(2)) -> uyen Chi Bao
println(name.subSequence(1, 4)) -> guy
------
def str = "This is a groovy class"
println(str.split(" ")) -> [This, is, a, groovy, class]
println(str-("groovy ")) -> This is a class
println(str.replace("class", "session")) -> This is a groovy session
println(str.toLowerCase()) -> this is a groovy class
println(str.toUpperCase()) -> THIS IS A GROOVY CLASS
println(str.toList()) -> [T, h, i, s,  , a,  ,......]
println("Groovy"*3) -> Groovy Groovy Groovy
println("Abc".equals("abc")) -> false
println("Abc).equalsIgnoreCase("abc") -> true
-------
def name = "Bao"
def s1 =  /a green sky 
	${name}/
def s2 = $/a blue tree 
	${name}/$
println(s1) ->  a green  sky
		Bao


pritnln(s2) -> a blue tree
		Bao
--------
def s3 = "My name is "Bao""
println(s3) -> error
-----
def s3 = "My name is \"Bao\""
println(s3) -> My name is "Bao"
--- 
def s4 = /My name is "Bao"/
println(s4) -> My name is "Bao"


*Lesson 15--------------------------------------------------*
// Methods


*Lesson 16--------------------------------------------------*
// Closures ~ Lambda trong các ngôn ngữ khác
def myClosure1 = {println("Hello World")}
myClosure1.call() -> Hello World

----
def myClosure1 = {name -> println("Hello ${name}")}
myClosure.call("Bao") -> Hello Bao

------
def str = "Hello"
def myClosure1 = {name -> println("${str} ${name}")}

myClosure1.call("Bao") -> Hello Bao

//def myMethod(){
//	println("$str")
//}
//myMethod() -> error (closure cho phép truy cập các biến bên ngoài nó, còn method bình không cho)

myMethod(clos){
	clos.call("Groovy")
}

myMethod(myClosure1) -> Hello Groovy
-------

def myClosure2 = {
	a,b,c-> 
	return (a+b+c)
}

def res = myClosure2(10, 20, 30) 

pritnln(res) -> 60

def myList1 = ["Apples", "Oranges", "Grapes"]

print(myList1.each{it}) -> [Apples, Oranges, Grapes]

def myMap = ['subject': 'Groovy',
	     'topic': 'closures'
	    ]
println(myMap.each{it}) -> [subject:groovy, topic: closures]

def myList =[1, 2, 3, 4, 5]

println(myList.find{item -> item == 3}) -> 3
println(myList.find{item -> item == 6}) -> null
printLn(myList.findAll{item -> item > 3}) -> [4, 5]
println(myList.any{item -> item > 3}) -> true
println(myList.any{item -> item > 6}) -> false
println(myList.every{item -> item > 3}) -> false
println(myList.collect{item -> item*2 }) -> [2, 4, 6, 8, 10]

*Lesson 17--------------------------------------------------*
// List: structure to store collection of data items
// Syntax: [obj1, obj2, obj3,...]
// [1, 2, 3, 4]
// ["Groovy", "Bao"]
// [1, 2, 3, ['A', 'B'], 4]
// [1, 2, "Groovy", 2.2]
// []

-----
def fruits = ["Apples", "Oranges", "Grapes"]
println(fruits[1]) -> Oranges 
println(fruits.get(2)) -> Grapes

def myList = [1, 2, 3, ['A', 'B', 'Groovy'], 4]
println(myList[2]) -> 3
println(myLsit[3][2]) -> Groovy
prtintln(myList.get(3).get(2)) -> Groovy

println(myList[0..2]) -> [1, 2, 3] 
println(myList[4..2]) -> [4, ['A', 'B', 'Groovy'], 3]
println(myList.contains(2)) -> true
println(myList.contains("Groovy")) -> false
println(myList[3].contains("Groovy")) -> true
println(myList.size()) -> 5
println(myList[3].zies()) -> 3
myList.add(10)
println(myList) -> [1, 2, 3, [A, B, Groovy], 4, 10]

myList<<20
println(myList) -> [1, 2, 3, [A, B, Groovy], 4, 10, 20]
println(myList.add(2, 22)) -> [1, 2, 22, 3, [A, B, Groovy], 4, 10, 20] (thêm 22 ở vị trí số 2)


myList.remove(2) (xóa ở index thứ 2)
println(myList) -> [1, 2, 3, [A, B, Groovy], 4, 10, 20]

myList = myList + [30, 40]
println(myList) -> [1, 2, 3, [A, B, Groovy], 4, 10, 20, 30, 40]

myList.plus([50])
println(myList) -> [1, 2, 3, [A, B, Groovy], 4, 10, 20, 30, 40, 50]

myList = myList - [30, 40]
println(myList) ->  [1, 2, 3, [A, B, Groovy], 4, 10, 20, 50]
myList = myList.minus([50])
println(myList) -> [1, 2, 3, [A, B, Groovy], 4, 10, 20]

myList.pop()
println(myList) -> [2, 3, [A, B, Groovy], 4, 10, 20]

myList.removeLast()
println(myList) -> [2, 3, [A, B, Groovy], 4, 10]

println(myList.intersect([1, 2, 3])) -> [2, 3] (intersect: giao nhau)

myList = myList.reverse()
println(myList) -> [10, 4, [Groovy, B, A], 3, 2]

myList = myList.sort()
println(myList) -> [2, 3, 4, [A, B, Groovy], 10, 20]

myList.clear()
println(myList.isEmpty()) -> true

*Lesson 18--------------------------------------------------*
// Map
key-value pair
unordered collection

[key : value]

['name': 'Bao']

[:] = empty map

def employee = [
	'name': 'Bao',
	'age': 22
	]

println(employee) -> [name:Bao, age:22]
println(employee.name) -> Bao
println(employee['name']) -> Bao
println(employee.get('age')) - > 22
println(employee.getAt('age')) -> 22

println(employee.size()) -> 2
println(employee.put('city', 'Paris')) 
println(employee) -> [name:Bao, age:22, city:Paris]

println(employee.containsKey('city')) -> true
println(employee.containsValue('Paris')) -> true

println(employee.getClass()) -> java.util.LinkedHashMap


def emp2 = employee.clone()
println(emp2) -> [name:Bao, age:22, city:Paris]

employee.each{key, value -> 
	println("${key} : ${value}")
}

employee.eachWithIndex{key, value, i ->
	println("${i} | ${key} : ${value}")
}

employee.each{entry, i->
	println("${i} | ${entry.key} : ${entry.value}")
}

def map1 = ['a' : 1, 'b' : 2]

def entries = map1.entrySet()

entries.each{entry ->
	assert entry.key in ['a', 'b']
	assert entry.value in [1, 2]
}

employee.clear()
println(employee) -> [:]

*Lesson 19--------------------------------------------------*
// Range

creates a list of sequantial values
denoted (biểu thị, chỉ rõ, kí hiệu) by first and last value of the sequence

1..10
'a'..'z'
10..1

2 types -> inclusive (bao gồm) & exclusive (loại trừ)
1..10 -> ".." -> 1 to 10
1..<10 -> "..<" -> 1 to 9

---
def range = 1..10
println(range) -> 1..10
println(range.size()) -> 10
println(range.getFrom()) -> 1
println(range.getTo) -> 10

assert range.from == 1 -> OK
assert range.to == 10 -> OK

println(range.get(3)) -> 4
println(range[3]) -> 4

println(range.contains(6)) -> true
println(range.isReverse()) -> false (vì 1..10, nếu 10..1 -> true)


def range2 = range.subList(3, 7)
println(range2.getFrom()) -> 4
println(range2.getTo()) -> 7


//iterate on a range 

for(i in range){
	println i 
} -> println from 1 to 10

(1..10).each{ i ->
	println("Value = ${i}")
}

range.each{ i ->
	println("Value = ${i}")
}

println(range instanceof java.util.List) -> true


*Lesson 20--------------------------------------------------*
// Input and Output
print("Enter your name:")
def name = System.console().readLine()
println("Hello ${name}")

print("Enter first number: ")
def num1 = System.console().readLine().toInteger()
print("Enter second number: ")
def num2 = System.console().readLine().toInteger()

println("${num1} + ${num2} = " + (num1 + number2))
-------
// Output
// print
// println
// printf


def myName = "Bao"
println("My name is ${myName}") -> My name is Bao
printf("My name is %s \n", myName) -> My name is Bao

printf("%s | %s | %d | %.2f \n", ["Bao", "Groovy", 10, 20.203])
printf("%-10s  | %10s | %d | %.2f \n", ["Bao", "Groovy", 10, 20.203])

*Lesson 21--------------------------------------------------*
// File IO | How to read Files

1. How to read file as String
2. How to read file as List
3. How to read file as Array
4. How to read file line by line
5. How to delete file
-----
// Reading Files
String filePath = "D:/data1.txt"
File myFile = new File(filePath)

// Reading entire content as String
println(myFile.text) -> Line 1
			Line 2
			Line 3

//collect lines into a list
def list = myFile.collect{it}
println("list : ${list}")

//store file content in an array
def array = myFile as String[]
println("array : ${array}") -> array: [Line 1, Line 2, Line 3]


// read file into a list of String
def lines = myFile.readLines()
println("lines: $lines") -> lines: [Line 1, Line 2, Line 3]

//read file line by line
myFile.eachLine { line -> 
	println("line: ${line}") 
}
-> line: Line 1
   line: Line 2
   line: Line 3

//read file line by line with line number
def lineNoRange = 2..4
def lineList = []
myFile.eachLine { line, lineNo -> 
	if(LineNoRange.contains(lineNo)){
		lineList.add(line)
	}
	//println("${lineNo}: ${line}") 
}
println("lineList: ${lineList}") -> lineList: [Line 2, Line 3]

//read with reader
def line
myFile.withReader {reader -> 
	while(line  = reader.readLine() != null){
		pritln("line: ${line}")	
	}
}
->line: Line 1
  line: Line 2
  line: Line 3


// reading with new reader
def outputFile = "data2.txt"
def reader = myFile.newReader()
new File(outputFile).append(reader)
reader.close()

//when working with binary files, read content as bytes
byte[] contents = myFile.bytes
println(contents) -> [76, 105, 110, .....]

// size in bytes
println(myFile.length()) -> 22

// check if is a file or dir
println(myFile.isFile()) -> true
println(myFile.isDirectory()) -> false

//get list of files from a dir
new File("D:/Desktop/TestJob1").eachFile{
	files -> println(files.getAbsolutePath())
}

//recursively display all files in a dir and its sub-dir
new File("D:/Desktop/TestJob1").eachFileRecurse{
	file -> println(file.getAbsolutePath())
}

//copy file data to another file
def newFile = new File("data3.txt")
newFile << myFile.text

//delete file 
newFile.delete()


*Lesson 22--------------------------------------------------*
// How to write Files

File myFile = new File("data1.txt")

myFile.write("This is Line 1")
myFile << "\nThis is Line 2"

println(myFile.text) -> This is Line 1
			This is Line 2

///myFile.text = "This is Line 3" -> sẽ ghi đè , tức là bỏ Line 1, Line 2 (đè)

myFile.withWriter{writer ->
	writer.writeLine(This is Line 4)
}

//println(myFile.text) -> This is Line 4

myFile.append("This is Line 5") -> This is Line 4

				   This is Line 5

println(myFile.length()) -> 30
println(myFile.isFile()) -> true
println(myFile.isDirectory()) -> false
println(myFile.isHidden()) -> false

def newFile = new File("data2.txt")
newFile << myFile.text

myFile.bytes = [] -> remove data

myFile.renameTo(new File("newFile.txt"))

myFile.delete()

println(text) -> This is Line 4
		 This is Line 5

*Lesson 23--------------------------------------------------*
// OOP | Classes & Objects

Class - collection of data and methods that represent a real world object


*Lesson 24--------------------------------------------------*
// OOP | Example 1


class Student {
	String name
	int sub1Marks
	int sub2Marks

	def printTotal() {
		println("${name} has total marks = " + (sub1Marks + sub2Marks))
	}

	static void main(args){
		Student student1 = new Student()
		student.name = 'John'
		student.sub1Marks = 88
		student.sub2Marks = 77
		student.printTotal()
	}
}


*Lesson 25--------------------------------------------------*
// OOP | Example 2 


class Car{

	String name
	String color
	int model

	def getCarDetails(){
		println("You are driving $model, $color colored $name")
	}

	def starEngine(){
		println("Starting engine for ${name}")
	}
	
	static void main(args){
		
		Car toyota = new Car()
		Car ford = new Car()
		Car mercedes = new Car()

		toyota.name = "Toyota"
		toyota.model = 2019
		toyota.color = "Red"

		ford.name = "Ford"
		ford.model = 2018
		ford.color = "White"

		toyota.name = "Mercedes"
		toyota.model = 2017
		toyota.color = "Grey"

		toyota.getCarDetails()
		toyota.starEngine()
		println("================================================")

		ford.getCarDetails()
		ford.starEngine()
		println("================================================")

		mercedes.getCarDetails()
		mercedes.starEngine()
		println("================================================")
	}
}


*Lesson 26--------------------------------------------------*
// OOP | Example 3


*Lesson 27--------------------------------------------------*
// OOP | Inheritance and Method Overriding 

Inheritance: process where one class acquires properties (methods and fields) from another class 

parent child 
super  sub
base   derived (derive: chuyển hóa, trích dẫn)

class Animal {
	String name
	String breed (giống, loài)

	def eats(){
		println("$name eats")
	}

	def moves(){
		println("$name moves")
	}
}


class Dog extends Animal{
	
	String dogName
	def plays() {
		println("${dogName} likes to play")
	}

	def eats() {
		println("${dogName} likes to eat")
	}
}

class DogObjects {
	static void main(args) {
		Dog dog1 = new Dog()
		dog1.name = "Dog"
		dog1.breed = "German Shephered"
		dog1.eats() -> null likes to eat
		dog1.moves()
		dog1.dogName = "Buddy"
		dog1.plays()
		dog1.eats() -> Buddy likes to eat
	}

}

*Lesson 28--------------------------------------------------*
// OOP | Inheritance Example  



class Cars {
	String name
	String color
	String model

	def starEngine() {
		println("Engine started for ${name}")
	}

	def stopEngine() {
		println("Engine stoppedfor ${name}")
	}

	def accelerate() {
		println("Accelerating ${name}")
	}
}

class Toyota extends Cars{
	int topSpeed
	def topSpeed() {
		println("Top speed is ${topSpeed}")
	}

	static void main(args) {
		Toyota car1 = new Toyota()
		car1.name = "Toyota"
		car1.color = "Red"
		car1.model = 2019
		car1.topSpeed = 200
		car1. starEngine()
		car1.accelerate()
		car1.topSpeed()
		car1.stopEngine()
	}
}

*Lesson 29--------------------------------------------------*
// OOP | Abstract class with example

abstract class Car {
	String name
	String color
	String model

	def starEngine() {
		println("Engine started for ${name}")
	{

	abstract def topSpeed();
}

class Toyota extends Car {
	int topSpeed

	@Override
	public Object topSpeed() {
		println("Top speed for ${name} is ${topSpeed}")
	}

	static void main(args) {
		Toyota car1 = new Toyota()
		car1.name = "Toyota"
		car1.model = 2019
		car1.color = "Red"
		car1.topSpeed = 250
		car1.starEngine()
		car1.topSpeed()
	}
}

*Lesson 30--------------------------------------------------*
// OOP | Interface

interface Car {
	
	def startEngine()
	def stopEngine()
}

class Toyota implements Car {
	@Override 
	public Object startEngine() {
		return null
	}

	@Override
	public Object stopEngine() {
		return null
	}
}


*Lesson 31--------------------------------------------------*
// OOP | Regular Expressions (Biểu thức chính quy)

// regex - pattern used to find substrings in a text
// ~ "expression"


def regex = /(?:[^Groovy]*)/
def match = "This is Groovy" =~ regex

if (match) {
	def i=0
	while(match) {
		println(match[i])
		i++
	}
} else {
	println("No match found")
}

*DONE---------------------------------------------------------*



























































