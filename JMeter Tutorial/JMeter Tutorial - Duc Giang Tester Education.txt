***==============JMeter Automation - Duc Giang Tester Education Youtube Channel=================***

Lesson 01-------------------------------------------------*
// Config API
Đề bài: Thực hành config API trên JMeter, Run và xem Result

- Thread group: số lượng users cùng thực hiện 1 action nào đó trong một khoảng thời gian
- Bất cứ khi nào cần dùng tính năng gì trong samplers đều cần tạo thread group
  (Chuột phải trên Test Plan > Add > Threads (users) > Thread Group)
- Chúng ta có thể biến đổi tên tất cả các thành phần trong JMeter

- Samplers: chứa các thành phần dùng để gửi yêu cầu đến máy chủ và nhận phản hồi
- Listeners: hiển thị kết quả, thông thường ta sẽ dùng View Results Tree để xem Response API. 
  Các Listeners cho phép người dùng xem và phân tích kết quả dưới dạng đồ thị, bảng hoặc ghi log
- Thêm Header (nếu cần): right click (lên API thì Header cho API đó, lên Thread Group thì chung cho mọi API trong
Thread Group đó) -> Config Element -> HTTP Header Manager 


Lesson 02-------------------------------------------------*
// Config a Thread Group
Ví dụ: Muốn giả lập 100 người chạy API nàY (API ở bài 1) trong 5s thì sao

- Number of threads (users): Lấy số request (users) muốn gửi tới server
- Ramp up period (second): Là tổng thời gian JMeter gửi hết số lượng request đi
Ví dụ: 
	-> 1000 target threads với 1000 seconds ramp-up: JMeter sẽ gửi 1 request 1s
	-> 1000 target threads với 100 seconds ramp-up: JMeter sẽ gửi 10 request 1s
	-> 1000 target threads với 50 seconds ramp-up: JMeter sẽ gửi 20 request 1s

- Loop count: Là số lần lặp lại
Ví dụ: cho 100 user chạy và loop count là 3 -> tổng số lần chạy sẽ là 100 user với 1 lần chạy và lặp lại 3 lần
= 30 lần chạy, khi check vào Infinite ( (adj)[ˈinfənət]): vô hạn) thì sẽ chạy vô hạn

- Các action khi đang chạy mà 1 request bị fail thì sẽ làm gì:
	+ Continue: Khi có lỗi trong một sample, JMeter sẽ tiếp tục thực thi 
	các samples còn lại trong cùng một thread hoặc thử lại các samples 
	trong các thread tiếp theo mà không dừng lại.

	+ Star next thread loop: au khi một sample gặp lỗi, JMeter sẽ bắt đầu 
	vòng lặp (loop) của thread tiếp theo, thay vì tiếp tục các sample còn 
	lại trong thread hiện tại.

	+ Stop thread:Dừng chỉ thread hiện tại khi gặp lỗi, các threads còn lại sẽ tiếp tục chạy.

	+ Stop test: Dừng toàn bộ test khi có lỗi xảy ra, 
	nhưng các threads sẽ hoàn thành các sample còn lại trước khi test dừng.

	+ Stop test now: Đây là lựa chọn cực kỳ khẩn cấp. Ngay khi có lỗi, toàn bộ test (Test Plan)
	sẽ dừng lại ngay lập tức mà không đợi các thread khác hoàn thành.
	

// Một loại Listeners nữa (Bài 1 là View Results Tree): là Summary Report
Right Click on Thread Groups -> Add -> Listeners -> Summary Report 
Trong Summary Report: 
	Column: Std.Dev: Độ lệch chuẩn | Đơn vị thời gian (thường là giây) = căn bậc 2 của phương sai)
	Throughput (đây là thông số quan trọng): số lượng request được server xử lý trong 1 đơn vị thời gian thường là giây (s)
	Received kb/s - lưu lượng server trả về, đơn vị là kilobytes/s
	Sent kb/s - lưu lượng client gửi đi server, đơn vị là kilobyte/s
	Avg.byte - lưu lượng trung bình mà server trả về là bytes




Lesson 03-------------------------------------------------*
// JsonPath
- Định dạng JSON:
{
	"key1" : "value1",
	"key2" : "value2",
	"key3" :
		{
			"key3.1" : "value3.1",
			"key3.2" : "value3.2",
			...
		},
	......
}
- Có 6 loại cho value:
	1. Object - {}
	2. Array - []
	3. String - ""
	4. Number - 20
	5. Boolean - true/false
	6. null


- Lấy JsonPath thủ công ($ hoặc x hoặc ko có: tùy vào phần mềm sử dụng Json Path đó)
	+ Để lấy value của một key: $.key
	+ Để lấy value của key2 mà key2 là con key1: $.key1.key2
	+ Để lấy value của key2 mà key2 là con key1 + value của key1 có nhiều value [] -> phải thêm chỉ số index: $.key1[0].key2
	(index đi từ 0)
	+ Để lấy value thứ nhất của key2 (key2 có nhiều value) mà key2 là con key1: $.key1.key2[0]
     => Đi theo cấp, nếu nó nhiều thì đánh index (đi từ 0), có thể check value bằng jsonpath.com

- Lấy JsonPath bằng JsonFinder 


Lesson 04-------------------------------------------------*
// Json Assertion
Khi API trả về response -> ta muốn verify JSON trong response như mong muốn thì thế nào
-> có rất nhiều cách và nhiều function khác nhau để verify trên JMeter, chúng nằm ở Add >> Assertion >>...

- Ô Match á regular expression: tick vào thì giá trị xem như biểu thức chính quy, có thể bắt các giá trị ko chính xác (vì lúc này nó xem như biểu thức chính quy)

Đề bài 1:
	. Request:
		+ URL: https://reqres.in/api/login
		+ Method: POST
		+ Body: dạng parameter
			. email: eve.holt@reqres.in
			. password: cityslicka

	. Response
	{
		"token": "aQanhsdsjhid7X4"
	}

	. Yêu cầu: Tôi muốn login bằng account trên và check xem token trả ra có đúng không


-> Trong Json Assertion có các tham số:
	. Assert json path exist: Path Json dẫn tới giá trị cần check, bắt đầu bằng "$."
	. Expected Value: Giá trị mong muốn



Đề bài 2:
	. Request:
		+ URL: https://reqres.in/api/users?page=2
		+ Method: GET

	. Yêu cầu: Hãy check xem các id của key "data" có giá trị từ 7 đến 12 hay không?
	. Lời giải:
		Lấy id thứ 1 -> $.data[0].id => kết quả là 7
		Lấy hết id   -> $.data[*].id => kết quả [7, 8, 9, 10, 11, 12]


Lesson 05-------------------------------------------------*
// Response Assertion: Dùng để check 1 giá trị cụ thể (không chỉ JSON như bài trước) trong response có như mong đợi không
// Vị trí: Right Click HTTP Request -> Add -> Assertions -> Response Assertion

- Có rất nhiều mục, 4 mục chính cần quan tâm:
	+ Apply to: Chọn phạm vi để check response
	+ Field to test: Các trường cụ thể trong response muốn lấy giá trị để check
	+ Pattern matching rules: Quy luật so sánh actual result và expected result: equal, contain, match, ....
	+ Pattern to test: Là giá trị mong muốn, click add để điền, nếu nhiều giá trị thì add nhiều lần và chọn thêm OR
	


















