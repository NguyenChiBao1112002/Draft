******************JMeter Tutorial *** Quality Assurance Lab*****************************
Link Youtube: https://www.youtube.com/@qualityassurancelab7764

========================================================================================

***Lesson 1 - How to install JMeter--------------------------------------------------------

Number of threads = 10
Ramp up period = 100 [ramp up: tăng tốc]
each thread(user) - 100/10 to be up and running

For example: 
2
4
-> 4/2 - 2 sec to be up and running
----------------------------------------------------------------------------------------

***Lesson 2 - How to create First JMeter Test | JMeter Sample Test----------------------
----------------------------------------------------------------------------------------

***Lesson 3 - How to record test in JMeter | How to use Test Script Recorder in JMeter-----
How to create: Add > Non-Test Elements > HTTP(S) Test Script Recorder (To Start: Need add certificate to the Browser + Use proxy)

-----------------------------------------------------------------------------------------

***Lesson 4 - Listeners in JMeter | View Result Tree | View Result in Table | Aggregate (n, adj: tổng hợp) Report-----------
Report can be saved by entering Folder Name

-----------------------------------------------------------------------------------------

***Lesson 5 - How to run JMeter test from Command Line-----------------------------------
Why do we need to use command line? -> Because, it will comsumming a lot of memory when using GUI mode.
GUI of JMeter is designed just for recording development and debugging purpose.

In cmd: 
	Step 1: cd ...bin (contains JMeter)
	Step 2: jmeter -n -t <test JMX file> -l <test log file> (e.x: jmeter -n -t .....\demo.jmx -l ...\results2.csv)
	
. jmeter -h : get all options what we can do from command line for the JMeter

-----------------------------------------------------------------------------------------

***Lesson 6 - How to generate HTML Dashboard Report in JMeter from Command Line----------
For example: jmeter -n -t "C:\Users\ncbao\Downloads\Draft Repo On Github\Draft\JMeter Tutorial\Quality Assurance Lab\L4 - Listener.jmx"
		    -l "C:\Users\ncbao\Downloads\Draft Repo On Github\Draft\JMeter Tutorial\Quality Assurance Lab\result3.csv" 
                    -e -o "C:\Users\ncbao\Downloads\Draft Repo On Github\Draft\JMeter Tutorial\Quality Assurance Lab\htmlReport\report1"


- Generate report from (report.csv) with commandline: jmeter -g <log file> -o <Path to output folder>
For example: jmeter -g "C:\Users\ncbao\Downloads\Draft Repo On Github\Draft\JMeter Tutorial\result4.csv" 
                    -o "C:\Users\ncbao\Downloads\Draft Repo On Github\Draft\JMeter Tutorial\Quality Assurance Lab\htmlReport\report2"


Notes:
-n: Chạy JMeter trong chế độ non-GUI (không giao diện đồ họa). Điều này giúp tiết kiệm tài nguyên hệ thống và thường được sử dụng khi chạy kiểm thử tự động hoặc trong môi trường server.

-t "C:\path\to\file.jmx": Chỉ định tập tin JMX chứa cấu hình kịch bản kiểm thử mà bạn muốn thực hiện. Đây là tệp bạn đã tạo trong JMeter GUI để định nghĩa các bài kiểm thử.

-l "C:\path\to\result.csv": Chỉ định tệp kết quả (thường là định dạng .csv hoặc .jtl) nơi JMeter sẽ lưu các kết quả của bài kiểm thử (ví dụ như thời gian phản hồi, kết quả của mỗi request).

-e: Kích hoạt việc tạo báo cáo sau khi kiểm thử. Khi sử dụng option này, JMeter sẽ tạo ra một báo cáo tổng quan (summary report) sau khi hoàn thành kiểm thử.

-o "C:\path\to\htmlReport\report": Chỉ định đường dẫn thư mục nơi JMeter sẽ lưu các báo cáo HTML. Báo cáo này cung cấp các biểu đồ và thống kê chi tiết về kết quả kiểm thử trong định dạng dễ đọc.

-----------------------------------------------------------------------------------------

***Lesson 7 - How to read data from CSV File | Parameterization in JMeter----------------

-----------------------------------------------------------------------------------------

***Lesson 8 - How to use Assertions | Assertion Examples | Response Assertion------------

-----------------------------------------------------------------------------------------

***Lesson 9 - How to debug in JMeter using Listeners, Log Viewer and Debug Sampler-------

- Nếu muốn mở Log Viewer: Options Tab -> Check on Log Viewer
- Nếu muốn xem debug: C1: Options Tab -> Log Level -> Debug
		      C2: Add -> Sampler -> Debug Sampler

-----------------------------------------------------------------------------------------

***Lesson 10 - Handle Dynamic Value - Correlation (sự tương quan) | Regular Extractor - PostProcessor----

. What is a dynamic value? -> Values generated in reponse that changes every time for each iterating requests

E.x: 	
		|req			|response
launch app 	|			|session id (dynamic) - x or y
login to app	|session id -x (fail)	|


. How to handle dynamic value?
1) Capture the dynamic value from the reponse
2) Store (as a variable) the dynamic value from the reponse
3) Use that captured and stored dynamic value (as variable) in the subsequent req

E.x:
	Set-Cookie: PHPSESSID=8ei14226073av86rrjpdp5k2kd; path=/ 
	Set-Cookie: PHPSESSID=abc; path=/ 
	Set-Cookie: PHPSESSID=xyz; path=/ 
	-> Set-Cookie: PHPSESSID=(.+?); path=/ 	
	-> Có thể dùng RE Extractor để kiểm tra + gán biến
	-> Có thể dùng regexr.com để kiểm tra regular expression: 

	Template trong RE Extractor (giống như JSON Extractor trích xuất dữ liệu từ JSON để gán cho biến): để trích dẫn dữ liệu từ RE khớp để gán cho biến
	RE: "user_id":\s*"(\d+)" -> Tìm chuỗi "user_id": "12345" và trích xuất phần số
	Template: $1$ -> Chỉ định rằng bạn muốn trích xuất nhóm đầu tiên, tức là 56789
	Match No: 1 Trích xuất khớp đầu tiên (sẽ có nhiều chỗ khớp, muốn lấy chỗ nào)
	

-----------------------------------------------------------------------------------------
***Lesson 11 - How to send email using SMTP Sampler in JMeter
- How to create: Add -> Sampler -> SMTP Sampler

- SMTP Sampler: được sử dụng để kiểm thử việc gửi email qua giao thức SMTP, giúp xác minh chức năng gửi email của ứng dụng

- Server settings:
	+ Gmail:
		. SMTP server name: smtp.gmail.com
		. SMTP username: your Gmail address
		. SMTP password: your password
		. SMTP port: SSL - 465/ StartTLS - 587
	
	+ Outlook:
		. SMTP server name: smtp-mail.outlook.com
		. SMTP username: Your full Outlook.com email address
		. SMTP password: Your Outlook.com password
		. SMTP port: 587
		. SMTP TLS/SSL Encryption Required: Yes
	
	+ ...

- Format Timestamp: ${__time(dd/MM/yyyy - HH:mm:ss,)} (nên thêm vào Subject của email để biết thời gian test)

---> Đến bước này có thể gặp lỗi (Response Code: 500, Wrong username/password!) ---> Do gmail đã mặc định chuyển sang xác thực 2 bước, 
										     outlook thì ko (outlook xác minh 2 bước là tùy chọn)


---> *** How to enable 2 Step Vertification for gmail account | How to generate app password

email - gmail (goolge account)



issue: 
password doesn't work 

how to fix?
1) enalbe 2 step verification - makes google account more secure by adding extra layer of security

2) generate an app passwork: 16 digit passcode allows to access google account through applications
(trong quản lý gmail của google: Gõ tìm Mật khẩu ứng dụng hoặc App Passwords): tức là khi cài đặt xong thì gmail cho phép app đã chỉ định truy cập nó

3) Trong bất kỳ App nào đó (kiểm thử JMeter hay các Web) dùng:
username
password = "mật khẩu đã được tạo ra ở bước 2"

(Đã thực hiện và thành công)

-------------------------------------------------------------------------------------------------------
***Lesson 12 - Timer in JMeter | How to add Think Time | Constant Timer | Uniform Random Timer---------

How to create:
	Add -> Timer -> ...

- Constant Timer: delay một thời gian nhất định
- Uniform Random Timer:
	Công thức: Thread Delay = 0.x*(random delay maximum) + (constant delay offset), x thay đổi từ 0 đến 9 (random)

Ví dụ:
	random delay maximum - 100
	constant delay offset - 0
	-> nếu x được random là 0 -> thread delay = 0.0*100 + 0 = 0
	-> nếu x được random là 9 -> thread delay = 0.9*100 + 0 = 90 ms

-------------------------------------------------------------------------------------------------------
***Lesson 13 - How to use Logic Controllers (là mục lớn cảu các controller khác) in JMeter | Module Controller | Include Controller

- Simple Controller - used to group requests

- Once Only Controller: place those request inside this controller which needs execution only one time

- Module Controller + It is used to make the script modular
		    + It has mechanism to substitute test plan fragments into the current test plan at run time
		    + Test Scenario for Module Controller:
	 		. Login and Search a product 
	 		. Login and Order a product 
			. Login and Cancel order

- Include Controller: + The Include Controller is designed to use an external JMX file
		      + Test Scenario for include controller
				• login
				• search a product
				• order a product
				• cancel order

+ Test Fragment: + The Test Fragment element is a special type of controller that exists on the Test Plan tree at the same level as the Thread Group element.
	         + It is distinguished from a Thread Group in that it is not executed unless it is referenced by either a Module controller or an Include controller.

---------------------------------------------------------------------------------------------------------
***Lesson 14 - How to test SOAP/REST APIs in JMeter
- API - Application Programming Interface

e.x: John <-..........phone(API)..............-> Nick
Soem rules to use phone:
	. It should be turned on
	. There should be network/balance/data etc

- API - used for communication between two software with some rule/protocol/codes

- Webservices:
	. SOAP (e.x: http://www.dneonline.com/calculator.asmx?op=Add)
	. Restful webservices(REST) (e.x: https://reqres.in/api/users?page=2)
		+ Tpyes of Methods:
			. Get: retrieve data
			. Post: to create new data to server
			. Put: update data in server
			. Delete: to delete data from the server 

		+ e.x: https://reqres.in/api/users?page=2
			. Server: reqres.in
			. Path: /api/users
			. Parameters: page = 2
		
---------------------------------------------------------------------------------------------------------
***Lesson 15 - Database performance testing | How to create Database Test Plan | JDBC Request

- Prerequisites: 
	+ Database: 
		. Server Name
		. Port Number
		. Username
		. Password
		. Permission to do action(create, update, delete etc) in db
		. Add mysql connector jar to lib folder of JMeter (copy jar file and paste to lib folder of JMeter) and restart JMeter

- Step to Test Database using JMeter
	. Step 1: Make connection with database
		+ Right Click on Test plan -> Select "JDBC Connection Configuration" to configure JMeter connection with database
		+ Database url: jdbc:mysql://servername:portnumber/schemaName 
		if use local database: jdbc:mysql://localhost:3306/schemaName 

	. Step 2: Write sql query
		+ Add JDBC Sampler Request

	. Step 3: Execute the test

---------------------------------------------------------------------------------------------------------
***Lesson 16 - FTP Request in JMeter | How to test FTP Server | FTP JMeter example

- FTP Transfer Protocol: It is used to transfer files between two computers on internet
  E.x: Client(local machine) <-----file transfer(FTP)-------> Server(FTP Server)

- File can be - document/video/zip/ etc.

- Web provides FTP Server: https://dlptest.com/ftp-test
  Info: 
       . FTP URL: ftp.dlptest.com or ftp://ftp.dlptest.com/
       . FTP User: dlpuser
       . Password: rNrKYTX9g7z3RgJRmxWuGHbeu

- Cách để kết nối local machine và server machine
	. C1: Dùng Command Line
	. C2: GUI [FileZilla: phần mềm hỗ trợ truyền dữ liệu giữa máy tính cá nhân với máy chủ web thông qua internet bằng giao thức FTP]
	      Link: https://filezilla-project.org/download.php?type=client

-Use Binary Mode? -> dùng cho các tệp chứa dữ liệu nhị phân hoặc các dạng ko phải văn bản 
như hình ảnh (.jpg, .png), video (.mp4), phần mềm (.exe) [mặc định ASCII cho các text files như: .txt, .html, .csv]
 
---------------------------------------------------------------------------------------------------------
***Lesson 17 - How to use Functions and Variables in JMeter

- Functions:
	. Values that can populate fields of any sapmpler or other test element in test tree
	. Syntax: ${__functionName(par1, par2...)}, ${__functionName}
	. Parameters are passed to the function when the function is called
	. Functions are case sensitive (case sensitive: phân biệt chữ hoa chữ thường)

- Variables:
	. Container to store values
	. variables are local to a thread group
	. Case sensitive
	. Syntax: ${variableName}

- Function names:
	+ Log - used to log a message
	  Syntax: ${__log("Hello JMeter")}

	+ BeanShell - it evaluates the script passed to it and returns the result
	  Syntax: ${__BeanShell(1234*678,)}

	+ Time - returns current time in various formats
	  Syntax: ${__time(dd/MM/yyyy,)

	+ Counter - generates a new number each time it is called, starting from 1, and it gét incremented every time by +1
	 Syntax: ${__counter(,)}


- To show function dashboard: Tool -> Function Helper Dialog (to show detail of the funtion: select function -> Help)

---------------------------------------------------------------------------------------------------------
***Lesson 18 - How to monitor server health using Perfmon (Performance Monitor) Plugin | GUI Mode

- Server - machine where AUT is hosted

- Why to monitor server health? 
	+ Developed Test Script
	+ Performed the execution
	+ Test results: 
		. Result parameters:
		. Response times:
		. Min 
		. Max
		. Average(expected: 5 sec, actual: 30 sec)
		. Median
		. 90% line
		. etc
	-> To analyze the issue if we have any on the server side
	   Parameters:
		. CPU usage
		. Memory
		. Disk IO

- How to use JMeter perfmon:
	. Metrics collector listener
	. Server agent
	. Step-by-step:
		+ Download perfmon - https://jmeter-plugins.org/wiki/PerfMon/
		+ Download plugin manager - https://jmeter-plugins.org/wiki/PluginsManager/
		+ Server agent – need to be installed on the server where application under test is hosted
		  https://jmeter-plugins.org/wiki/PerfMon/ (unzip -> click on startAgent.bat to start)

---------------------------------------------------------------------------------------------------------
***Lesson 19 - How to perform Remote(Distribute) Testing JMeter | Master Slave Mechanism

- Why? 
	1. To simulate user load which JMeter client machine is not not able to handle due to infrastructure or hardware limitations
	2. To generate user load from different geographies to get realistic result parameter - response time

- Architecture: Works on master slave mechanism

- Prerequisite: 
	. Master and Slave machine must have JMeter installed on them (similar version)
	. Master and Slave machine must have Java installed on them (prefer to use similar version)
	. Master and Slave machine must connect to each other (same subnet)

- Configurations:
	Step 1:
		• Navigate to JMeter/bin folder
		• Open jmeter properties file
		• provide the IP address of remote hosts in JMeter properties file (là những máy làm Slave có thể nhiều máy cách nhau = dấu "phẩy")

	Step 2:
		• Navigate to JMeter/bin folder
		• Run create-rmi-keystore file and provide answer to the questions
		• rmi_keystore.jks file will be created
		• paste this file to remote hosts JMeter/bin folder

	Step 3:
		• Navigate to JMeter/bin folder
		• Run jmeter-server file 

---------------------------------------------------------------------------------------------------------
***Lesson 20 - BeanShell Script Part-1 | Introduction to Variable | Beanshell Sampler| PreProcessor


- What is bean Shell?
	. Scripting language developed in Java
	. It can dynamically execute standard java syntax
	. Scripting features-loose type (variable are declared without any type), command, etc.

- Why beanShell scripting required in JMeter?
 	. To customize our script in our own way

 + Beanshell Sampler
 + Beanshell pre processor
 + Beanshell post processor

 . BeanShell Sampler - It has provided predefined list of variables which we can use in our script
   vars.put("link", "www.google.com"); - to set the value of a variable
   var x = vars.get("link"); - to get value of a variable
   log.info("Value of x is " + x); - to print inside the logs
   ctx.getThread().getThreadName(); - to get thread name

--------------------------------------------------------------------------------------------------------
**Lesson 21 - BeanShell Script Part-2 | Write data to CSV file | BeanShell PostProcessor

import java.io.*;

File f = new File("C:\\Users\\ncbao\\Downloads\\Draft Repo On Github\\Draft\\JMeter Tutorial\\Quality Assurance Lab\\data\\TestResult_L21.csv");
//log.info(f.getAbsolutePath());

FileWriter fw = new FileWriter(f);
BufferedWriter bw = new BufferedWriter(fw);

var rc = prev.getResponseCode();

if(rc.equals("200")){
	bw.write("Test is passed!");
}else{
	bw.write("Test is failed!");
}

bw.close();
fw.close();

--------------------------------------------------------------------------------------------------------
**Lesson 22 - How to monitor server health using Perfmon Plugin | Non GUI Mode












